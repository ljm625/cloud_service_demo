/**
 * ViptelaPOC API
 * Make it possible to query, modify and delete rules and rulegroups
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import { Injectable } from  '@angular/core';
import {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import {map, catchError} from 'rxjs/operators';
import {Observable, throwError} from 'rxjs';

@Injectable({
  providedIn:  'root'
})
export class ApiService {

  // protected basePath = globals.REST_URL+'/api/v1';
  public httpOptions = {
    headers: new HttpHeaders({
      'Content-Type':  'application/json'
      // 'Authorization': 'my-auth-token'
    })
  };


  constructor(private  httpClient:  HttpClient) {}
  private API_URL  =  'http://localhost:9010';

  // headerParser(header:Headers){
  //   if (header.get('Authorization')!=undefined){
  //     header.set('Authorization',"Basic " + this.cookie.get('oci_session'));
  //     return header
  //   }
  //   else {
  //     header.append('Authorization',"Basic " + this.cookie.get('oci_session'));
  //     return header;
  //   }
  // }

  private build_url(link){
    return this.API_URL+"/api/v1/"+link
  }


  public get_service(id): Observable<any>{

    return this.httpClient.get(this.build_url('services/'+id))
      .pipe(
        catchError(err => this.handleError(err,"getService:"+id))
      )
  }

  public get_services(): Observable<any>{

    return this.httpClient.get(this.build_url('services'))
      .pipe(
        catchError(err => this.handleError(err,"getServices"))
      )
  }

  public create_service(body): Observable<any>{
    return this.httpClient.post(this. build_url('services'),
      JSON.stringify(body),this.httpOptions)
      .pipe(
        catchError(err => this.handleError(err,'createService'))
      )

  }



  public modify_service(id,body): Observable<any>{
    return this.httpClient.put(this.build_url('services/'+id),
      JSON.stringify(body),this.httpOptions)
      .pipe(
        catchError(err=> this.handleError(err,'modifyService:'+id))
      );

  }



  public delete_service(id): Observable<any>{
    return this.httpClient.delete(this.build_url('services/'+id))
      .pipe(
        catchError(err => this.handleError(err,'deleteService:'+id ))
      );

  }


  private handleError(error,operation) {
      if (error.error instanceof ErrorEvent) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error(`An error occurred when doing ${operation}:`, error.error.message);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong,
      console.error(
        `Backend returned code ${error.status}, ` +
        `body was: ${error.error}`);
    }
    // return an observable with a user-facing error message
    return throwError(
      'Something bad happened; please try again later.');
  };



  // /**
  //  * Add/Activate the firewall Rule.
  //  * @param body the name.
  //  */
  // public firewallPost (body: any, extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/firewall';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.defaultHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   if (body === null || body === undefined) {
  //     throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'POST',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //   requestOptions.body = JSON.stringify(body);
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Get the firewall status.
  //  */
  // public firewallGet (extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/firewall';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.getHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   // if (body === null || body === undefined) {
  //   //   throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   // }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'GET',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  // /**
  //  * Disable the firewall.
  //  */
  //
  // public firewallDelete (extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/firewall';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.getHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   // if (body === null || body === undefined) {
  //   //   throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   // }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'DELETE',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Add/Activate the AppRoute Rule.
  //  * @param body the name.
  //  */
  // public appRoutePost (body: any, extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/app_route';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.defaultHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   if (body === null || body === undefined) {
  //     throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'POST',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //   requestOptions.body = JSON.stringify(body);
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Get the approute status.
  //  */
  // public appRouteGet (extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/app_route';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.getHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   // if (body === null || body === undefined) {
  //   //   throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   // }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'GET',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  // /**
  //  * Disable the firewall.
  //  */
  //
  // public appRouteDelete (extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/app_route';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.getHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   // if (body === null || body === undefined) {
  //   //   throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   // }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'DELETE',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Get the device list.
  //  */
  // public deviceGet (extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/devices';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.getHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   // if (body === null || body === undefined) {
  //   //   throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   // }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'GET',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Get the device Intf list.
  //  */
  // public deviceIntfGet (intf_name: string,extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/devices/' + intf_name;
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.getHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   // if (body === null || body === undefined) {
  //   //   throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
  //   // }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'GET',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Get the traffic of the intf.
  //  * @param body including device and intf.
  //  */
  // public trafficPost (body: any, extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/traffic';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.defaultHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   if (body === null || body === undefined) {
  //     throw new Error('Required parameter body was null or undefined when calling trafficPost.');
  //   }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'POST',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //   requestOptions.body = JSON.stringify(body);
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }
  //
  //
  // /**
  //  * Get the app_vis of the intf.
  //  * @param body including device.
  //  */
  // public appvisPost (body: any, extraHttpRequestParams?: any ) : Observable<Array<any>> {
  //   const path = this.basePath + '/app_vis';
  //
  //   let queryParameters = new URLSearchParams();
  //   let headerParams = this.defaultHeaders;
  //   // verify required parameter 'body' is not null or undefined
  //   if (body === null || body === undefined) {
  //     throw new Error('Required parameter body was null or undefined when calling trafficPost.');
  //   }
  //   let requestOptions: RequestOptionsArgs = {
  //     method: 'POST',
  //     headers: headerParams,
  //     search: queryParameters
  //   };
  //   requestOptions.body = JSON.stringify(body);
  //
  //   return this.http.request(path, requestOptions)
  //     .map((response: Response) => {
  //       if (response.status === 204) {
  //         return undefined;
  //       } else {
  //         return response.json();
  //       }
  //     });
  // }


}
